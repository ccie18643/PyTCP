#!/usr/bin/env python3


############################################################################
#                                                                          #
#  PyTCP - Python TCP/IP stack                                             #
#  Copyright (C) 2020-2021  Sebastian Majewski                             #
#                                                                          #
#  This program is free software: you can redistribute it and/or modify    #
#  it under the terms of the GNU General Public License as published by    #
#  the Free Software Foundation, either version 3 of the License, or       #
#  (at your option) any later version.                                     #
#                                                                          #
#  This program is distributed in the hope that it will be useful,         #
#  but WITHOUT ANY WARRANTY; without even the implied warranty of          #
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           #
#  GNU General Public License for more details.                            #
#                                                                          #
#  You should have received a copy of the GNU General Public License       #
#  along with this program.  If not, see <https://www.gnu.org/licenses/>.  #
#                                                                          #
#  Author's email: ccie18643@gmail.com                                     #
#  Github repository: https://github.com/ccie18643/PyTCP                   #
#                                                                          #
############################################################################


#
# tests/test_packet_flows__tx.py - unit tests for packets originated by stack
#

from __future__ import annotations  # Required by Python ver < 3.10

from testslide import StrictMock, TestCase

from pytcp.lib.ip4_address import Ip4Address, Ip4Host
from pytcp.lib.ip6_address import Ip6Address, Ip6Host
from pytcp.lib.mac_address import MacAddress
from pytcp.misc.packet_stats import PacketStatsTx
from pytcp.protocols.arp.ps import ARP_OP_REQUEST
from pytcp.protocols.icmp4.ps import ICMP4_ECHO_REQUEST
from pytcp.protocols.icmp6.ps import ICMP6_ECHO_REQUEST
from pytcp.subsystems.arp_cache import ArpCache
from pytcp.subsystems.nd_cache import NdCache
from pytcp.subsystems.packet_handler import PacketHandler
from pytcp.subsystems.tx_ring import TxRing

PACKET_HANDLER_MODULES = [
    "pytcp.subsystems.packet_handler",
    "protocols.ether.phrx",
    "protocols.ether.phtx",
    "protocols.arp.phrx",
    "protocols.arp.phtx",
    "protocols.ip4.phrx",
    "protocols.ip4.phtx",
    "protocols.ip6.phrx",
    "protocols.ip6.phtx",
    "protocols.icmp4.phrx",
    "protocols.icmp4.phtx",
    "protocols.icmp6.phrx",
    "protocols.icmp6.phtx",
    "protocols.udp.phrx",
    "protocols.udp.phtx",
    "protocols.tcp.phrx",
    "protocols.tcp.phtx",
]


# Ensure critical configuration settings are set properly for the testing regardless of actual configuration
CONFIG_PATCHES = {
    "LOG_CHANEL": set(),
    "IP6_SUPPORT": True,
    "IP4_SUPPORT": True,
    "PACKET_INTEGRITY_CHECK": True,
    "PACKET_SANITY_CHECK": True,
    "TAP_MTU": 1500,
    "UDP_ECHO_NATIVE_DISABLE": False,
}


# Addresses below match the test packets and should not be changed
STACK_MAC_ADDRESS = MacAddress("02:00:00:77:77:77")

STACK_IP4_HOST = Ip4Host("192.168.9.7/24")
STACK_IP4_GATEWAY = Ip4Address("192.168.7.1")
STACK_IP4_GATEWAY_MAC_ADDRESS = MacAddress("02:00:00:11:11:11")

STACK_IP6_HOST = Ip6Host("2603:9000:e307:9f09:0:ff:fe77:7777/64")
STACK_IP6_GATEWAY = Ip6Address("2603:9000:e307:9f09::1")
STACK_IP6_GATEWAY_MAC_ADDRESS = MacAddress("02:00:00:11:11:11")

LOCNET_MAC_ADDRESS = MacAddress("52:54:00:df:85:37")
LOCNET_IP4_ADDRESS = Ip4Address("192.168.9.102")
LOCNET_IP4_ADDRESS_NO_ARP = Ip4Address("192.168.9.103")
LOCNET_IP6_ADDRESS = Ip6Address("2603:9000:e307:9f09::1fa1")
LOCNET_IP6_ADDRESS_NO_ND = Ip6Address("2603:9000:e307:9f09::2222")

EXTNET_IP4_ADDRESS = Ip4Address("10.0.0.15")
EXTNET_IP6_ADDRESS = Ip6Address("2501:7000:4303:9a0a::5cb5")

STACK_IP4_HOST.gateway = STACK_IP4_GATEWAY
STACK_IP6_HOST.gateway = STACK_IP6_GATEWAY


class TestPacketHandler(TestCase):
    def setUp(self):
        super().setUp()

        self._patch_config()

        # Assembled packet result is usually taken from 'self.packet_tx', below list is used only for tx fragmentation test
        # where multiple packets are being generated by single packet assembler run
        self.packets_tx = []

        self.arp_cache_mock = StrictMock(ArpCache)
        self.nd_cache_mock = StrictMock(NdCache)
        self.tx_ring_mock = StrictMock(TxRing)

        self.mock_callable(self.arp_cache_mock, "find_entry").for_call(LOCNET_IP4_ADDRESS).to_return_value(LOCNET_MAC_ADDRESS)
        self.mock_callable(self.arp_cache_mock, "find_entry").for_call(LOCNET_IP4_ADDRESS_NO_ARP).to_return_value(None)
        self.mock_callable(self.arp_cache_mock, "find_entry").for_call(STACK_IP4_GATEWAY).to_return_value(STACK_IP4_GATEWAY_MAC_ADDRESS)
        self.mock_callable(self.nd_cache_mock, "find_entry").for_call(LOCNET_IP6_ADDRESS).to_return_value(LOCNET_MAC_ADDRESS)
        self.mock_callable(self.nd_cache_mock, "find_entry").for_call(LOCNET_IP6_ADDRESS_NO_ND).to_return_value(None)
        self.mock_callable(self.nd_cache_mock, "find_entry").for_call(STACK_IP6_GATEWAY).to_return_value(STACK_IP6_GATEWAY_MAC_ADDRESS)
        self.mock_callable(self.tx_ring_mock, "enqueue").with_implementation(lambda _: _.assemble(self.packet_tx) or self.packets_tx.append(self.packet_tx))

        # Initialize packet handler and manually set all the variables that normally would require network connectivity
        self.packet_handler = PacketHandler(None)
        self.packet_handler.mac_address = STACK_MAC_ADDRESS
        self.packet_handler.ip4_host = [STACK_IP4_HOST]
        self.packet_handler.ip6_host = [STACK_IP6_HOST]
        self.packet_handler.ip6_multicast = [Ip6Address("ff02::1"), STACK_IP6_HOST.address.solicited_node_multicast]
        self.packet_handler.arp_cache = self.arp_cache_mock
        self.packet_handler.nd_cache = self.nd_cache_mock
        self.packet_handler.tx_ring = self.tx_ring_mock

        self.packet_tx = memoryview(bytearray(2048))

    def _patch_config(self):
        """Patch critical config setting for all packet handler modules"""

        for module in PACKET_HANDLER_MODULES:
            for variable, value in CONFIG_PATCHES.items():
                try:
                    self.patch_attribute(f"{module}.config", variable, value)
                except ModuleNotFoundError:
                    continue

    # Test name format: 'test_name__protocol_tested__test_description__optional_condition'

    def test_packet_flow_tx__ether__ip4_icmp4_echo_to_locnet_address(self):
        """[Ethernet] Send IPv4/ICMPv4 Echo packet to host on local subnet"""

        with open("tests/packets/tx/ip4_icmp4_echo_request_to_locnet_address.tx", "rb") as _:
            packet_tx = _.read()
        tx_status = self.packet_handler._phtx_icmp4(
            ip4_src=STACK_IP4_HOST.address,
            ip4_dst=LOCNET_IP4_ADDRESS,
            icmp4_type=ICMP4_ECHO_REQUEST,
            icmp4_ec_data=b"Test TX ICMPv4 Echo Request to local network",
        )
        self.assertEqual(str(tx_status), "PASSED_TO_TX_RING")
        self.assertEqual(
            self.packet_handler.packet_stats_tx,
            PacketStatsTx(
                icmp4__pre_assemble=1,
                icmp4__echo_request__send=1,
                ip4__pre_assemble=1,
                ip4__mtu_ok__send=1,
                ether__pre_assemble=1,
                ether__src_unspec__fill=1,
                ether__dst_unspec__ip4_lookup=1,
                ether__dst_unspec__ip4_lookup__locnet__arp_cache_hit__send=1,
            ),
        )
        self.assertEqual(self.packet_tx[: len(packet_tx)], packet_tx)

    def test_packet_flow_tx__ether__ip4_icmp4_echo_to_limited_broadcast_address(self):
        """[Ethernet] Send IPv4/ICMPv4 Echo packet to limited broadcast address"""

        with open("tests/packets/tx/ip4_icmp4_echo_request_to_limited_broadcast_address.tx", "rb") as _:
            packet_tx = _.read()
        tx_status = self.packet_handler._phtx_icmp4(
            ip4_src=STACK_IP4_HOST.address,
            ip4_dst=Ip4Address("255.255.255.255"),
            icmp4_type=ICMP4_ECHO_REQUEST,
            icmp4_ec_data=b"Test TX ICMPv4 Echo Request to limited broadcast",
        )
        self.assertEqual(str(tx_status), "PASSED_TO_TX_RING")
        self.assertEqual(
            self.packet_handler.packet_stats_tx,
            PacketStatsTx(
                icmp4__pre_assemble=1,
                icmp4__echo_request__send=1,
                ip4__pre_assemble=1,
                ip4__mtu_ok__send=1,
                ether__pre_assemble=1,
                ether__src_unspec__fill=1,
                ether__dst_unspec__ip4_lookup=1,
                ether__dst_unspec__ip4_lookup__limited_broadcast__send=1,
            ),
        )
        self.assertEqual(self.packet_tx[: len(packet_tx)], packet_tx)

    def test_packet_flow_tx__ether__ip4_icmp4_echo_to_network_broadcast_address(self):
        """[Ethernet] Send IPv4/ICMPv4 Echo packet to network broadcast address"""

        with open("tests/packets/tx/ip4_icmp4_echo_request_to_network_broadcast_address.tx", "rb") as _:
            packet_tx = _.read()
        tx_status = self.packet_handler._phtx_icmp4(
            ip4_src=STACK_IP4_HOST.address,
            ip4_dst=STACK_IP4_HOST.network.broadcast,
            icmp4_type=ICMP4_ECHO_REQUEST,
            icmp4_ec_data=b"Test TX ICMPv4 Echo Request to network broadcast",
        )
        self.assertEqual(str(tx_status), "PASSED_TO_TX_RING")
        self.assertEqual(
            self.packet_handler.packet_stats_tx,
            PacketStatsTx(
                icmp4__pre_assemble=1,
                icmp4__echo_request__send=1,
                ip4__pre_assemble=1,
                ip4__mtu_ok__send=1,
                ether__pre_assemble=1,
                ether__src_unspec__fill=1,
                ether__dst_unspec__ip4_lookup=1,
                ether__dst_unspec__ip4_lookup__network_broadcast__send=1,
            ),
        )
        self.assertEqual(self.packet_tx[: len(packet_tx)], packet_tx)

    def test_packet_flow_tx__ether__ip4_icmp4_echo_to_network_address(self):
        """[Ethernet] Send IPv4/ICMPv4 Echo packet to the network address"""

        with open("tests/packets/tx/ip4_icmp4_echo_request_to_network_address.tx", "rb") as _:
            packet_tx = _.read()
        tx_status = self.packet_handler._phtx_icmp4(
            ip4_src=STACK_IP4_HOST.address,
            ip4_dst=STACK_IP4_HOST.network.address,
            icmp4_type=ICMP4_ECHO_REQUEST,
            icmp4_ec_data=b"Test TX ICMPv4 Echo Request to network address",
        )
        self.assertEqual(str(tx_status), "PASSED_TO_TX_RING")
        self.assertEqual(
            self.packet_handler.packet_stats_tx,
            PacketStatsTx(
                icmp4__pre_assemble=1,
                icmp4__echo_request__send=1,
                ip4__pre_assemble=1,
                ip4__mtu_ok__send=1,
                ether__pre_assemble=1,
                ether__src_unspec__fill=1,
                ether__dst_unspec__ip4_lookup=1,
                ether__dst_unspec__ip4_lookup__network_broadcast__send=1,
            ),
        )
        self.assertEqual(self.packet_tx[: len(packet_tx)], packet_tx)

    def test_packet_flow_tx__ether__ip4_icmp4_echo_to_locnet_address__arp_cache_miss(self):
        """[Ethernet] Send IPv4/ICMPv4 Echo packet to host on local subnet, ARP cache miss - drop"""

        tx_status = self.packet_handler._phtx_icmp4(
            ip4_src=STACK_IP4_HOST.address,
            ip4_dst=LOCNET_IP4_ADDRESS_NO_ARP,
            icmp4_type=ICMP4_ECHO_REQUEST,
            icmp4_ec_data=b"Test TX ICMPv4 Echo Request to local network",
        )
        self.assertEqual(str(tx_status), "DROPED_ETHER_DST_ND_CACHE_FAIL")
        self.assertEqual(
            self.packet_handler.packet_stats_tx,
            PacketStatsTx(
                icmp4__pre_assemble=1,
                icmp4__echo_request__send=1,
                ip4__pre_assemble=1,
                ip4__mtu_ok__send=1,
                ether__pre_assemble=1,
                ether__src_unspec__fill=1,
                ether__dst_unspec__ip4_lookup=1,
                ether__dst_unspec__ip4_lookup__locnet__arp_cache_miss__drop=1,
            ),
        )

    def test_packet_flow_tx__ether__ip4_icmp4_echo_to_extnet_address(self):
        """[Ethernet] Send IPv4/ICMPv4 Echo packet to host on external subnet"""

        with open("tests/packets/tx/ip4_icmp4_echo_request_to_extnet_address.tx", "rb") as _:
            packet_tx = _.read()
        tx_status = self.packet_handler._phtx_icmp4(
            ip4_src=STACK_IP4_HOST.address,
            ip4_dst=EXTNET_IP4_ADDRESS,
            icmp4_type=ICMP4_ECHO_REQUEST,
            icmp4_ec_data=b"Test TX ICMPv4 Echo Request to external network",
        )
        self.assertEqual(str(tx_status), "PASSED_TO_TX_RING")
        self.assertEqual(
            self.packet_handler.packet_stats_tx,
            PacketStatsTx(
                icmp4__pre_assemble=1,
                icmp4__echo_request__send=1,
                ip4__pre_assemble=1,
                ip4__mtu_ok__send=1,
                ether__pre_assemble=1,
                ether__src_unspec__fill=1,
                ether__dst_unspec__ip4_lookup=1,
                ether__dst_unspec__ip4_lookup__extnet__gw_arp_cache_hit__send=1,
            ),
        )
        self.assertEqual(self.packet_tx[: len(packet_tx)], packet_tx)

    def test_packet_flow_tx__ether__ip4_icmp4_echo_to_extnet_address__no_gateway(self):
        """[Ethernet] Send IPv4/ICMPv4 Echo packet to host on external subnet, no gateway - drop"""

        STACK_IP4_HOST.gateway = None

        tx_status = self.packet_handler._phtx_icmp4(
            ip4_src=STACK_IP4_HOST.address,
            ip4_dst=EXTNET_IP4_ADDRESS,
            icmp4_type=ICMP4_ECHO_REQUEST,
            icmp4_ec_data=b"Test TX ICMPv4 Echo Request to external network",
        )
        self.assertEqual(str(tx_status), "DROPED_ETHER_DST_NO_GATEWAY_IP4")
        self.assertEqual(
            self.packet_handler.packet_stats_tx,
            PacketStatsTx(
                icmp4__pre_assemble=1,
                icmp4__echo_request__send=1,
                ip4__pre_assemble=1,
                ip4__mtu_ok__send=1,
                ether__pre_assemble=1,
                ether__src_unspec__fill=1,
                ether__dst_unspec__ip4_lookup=1,
                ether__dst_unspec__ip4_lookup__extnet__no_gw__drop=1,
            ),
        )

    def test_packet_flow_tx__ether__ip4_icmp4_echo_to_extnet_address__gateway_arp_cache_miss(self):
        """[Ethernet] Send IPv4/ICMPv4 Echo packet to host on external subnet, gateway ARP cache miss - drop"""

        STACK_IP4_HOST.gateway = LOCNET_IP4_ADDRESS_NO_ARP

        tx_status = self.packet_handler._phtx_icmp4(
            ip4_src=STACK_IP4_HOST.address,
            ip4_dst=EXTNET_IP4_ADDRESS,
            icmp4_type=ICMP4_ECHO_REQUEST,
            icmp4_ec_data=b"Test TX ICMPv4 Echo Request to external network",
        )
        self.assertEqual(str(tx_status), "DROPED_ETHER_DST_GATEWAY_ND_CACHE_FAIL")
        self.assertEqual(
            self.packet_handler.packet_stats_tx,
            PacketStatsTx(
                icmp4__pre_assemble=1,
                icmp4__echo_request__send=1,
                ip4__pre_assemble=1,
                ip4__mtu_ok__send=1,
                ether__pre_assemble=1,
                ether__src_unspec__fill=1,
                ether__dst_unspec__ip4_lookup=1,
                ether__dst_unspec__ip4_lookup__extnet__gw_arp_cache_miss__drop=1,
            ),
        )

    def test_packet_flow_tx__ether__ip6_icmp6_echo_to_locnet_address(self):
        """[Ethernet] Send IPv6/ICMPv6 Echo packet to host on local subnet"""

        with open("tests/packets/tx/ip6_icmp6_echo_request_to_locnet_address.tx", "rb") as _:
            packet_tx = _.read()
        tx_status = self.packet_handler._phtx_icmp6(
            ip6_src=STACK_IP6_HOST.address,
            ip6_dst=LOCNET_IP6_ADDRESS,
            icmp6_type=ICMP6_ECHO_REQUEST,
            icmp6_ec_data=b"Test TX ICMPv6 Echo Request to local network",
        )
        self.assertEqual(str(tx_status), "PASSED_TO_TX_RING")
        self.assertEqual(
            self.packet_handler.packet_stats_tx,
            PacketStatsTx(
                icmp6__pre_assemble=1,
                icmp6__echo_request__send=1,
                ip6__pre_assemble=1,
                ip6__mtu_ok__send=1,
                ether__pre_assemble=1,
                ether__src_unspec__fill=1,
                ether__dst_unspec__ip6_lookup=1,
                ether__dst_unspec__ip6_lookup__locnet__nd_cache_hit__send=1,
            ),
        )
        self.assertEqual(self.packet_tx[: len(packet_tx)], packet_tx)

    def test_packet_flow_tx__ether__ip6_icmp6_echo_to_multicast_address(self):
        """[Ethernet] Send IPv6/ICMPv6 Echo packet to multicast address"""

        with open("tests/packets/tx/ip6_icmp6_echo_request_to_multicast_address.tx", "rb") as _:
            packet_tx = _.read()
        tx_status = self.packet_handler._phtx_icmp6(
            ip6_src=STACK_IP6_HOST.address,
            ip6_dst=Ip6Address("ff01::1"),
            icmp6_type=ICMP6_ECHO_REQUEST,
            icmp6_ec_data=b"Test TX ICMPv6 Echo Request to IPv6 multicast address",
        )
        self.assertEqual(str(tx_status), "PASSED_TO_TX_RING")
        self.assertEqual(
            self.packet_handler.packet_stats_tx,
            PacketStatsTx(
                icmp6__pre_assemble=1,
                icmp6__echo_request__send=1,
                ip6__pre_assemble=1,
                ip6__mtu_ok__send=1,
                ether__pre_assemble=1,
                ether__src_unspec__fill=1,
                ether__dst_unspec__ip6_lookup=1,
                ether__dst_unspec__ip6_lookup__multicast__send=1,
            ),
        )
        self.assertEqual(self.packet_tx[: len(packet_tx)], packet_tx)

    def test_packet_flow_tx__ether__ip6_icmp4_echo_to_locnet_address__nd_cache_miss(self):
        """[Ethernet] Send IPv6/ICMPv6 Echo packet to host on local subnet, ND cache miss - drop"""

        tx_status = self.packet_handler._phtx_icmp6(
            ip6_src=STACK_IP6_HOST.address,
            ip6_dst=LOCNET_IP6_ADDRESS_NO_ND,
            icmp6_type=ICMP6_ECHO_REQUEST,
            icmp6_ec_data=b"Test TX ICMPv6 Echo Request to local network",
        )
        self.assertEqual(str(tx_status), "DROPED_ETHER_DST_ARP_CACHE_FAIL")
        self.assertEqual(
            self.packet_handler.packet_stats_tx,
            PacketStatsTx(
                icmp6__pre_assemble=1,
                icmp6__echo_request__send=1,
                ip6__pre_assemble=1,
                ip6__mtu_ok__send=1,
                ether__pre_assemble=1,
                ether__src_unspec__fill=1,
                ether__dst_unspec__ip6_lookup=1,
                ether__dst_unspec__ip6_lookup__locnet__nd_cache_miss__drop=1,
            ),
        )

    def test_packet_flow_tx__ether__ip4_icmp6_echo_to_extnet_address(self):
        """[Ethernet] Send IPv6/ICMPv6 Echo packet to host on external subnet"""

        with open("tests/packets/tx/ip6_icmp6_echo_request_to_extnet_address.tx", "rb") as _:
            packet_tx = _.read()
        tx_status = self.packet_handler._phtx_icmp6(
            ip6_src=STACK_IP6_HOST.address,
            ip6_dst=EXTNET_IP6_ADDRESS,
            icmp6_type=ICMP6_ECHO_REQUEST,
            icmp6_ec_data=b"Test TX ICMPv6 Echo Request to external network",
        )
        self.assertEqual(str(tx_status), "PASSED_TO_TX_RING")
        self.assertEqual(
            self.packet_handler.packet_stats_tx,
            PacketStatsTx(
                icmp6__pre_assemble=1,
                icmp6__echo_request__send=1,
                ip6__pre_assemble=1,
                ip6__mtu_ok__send=1,
                ether__pre_assemble=1,
                ether__src_unspec__fill=1,
                ether__dst_unspec__ip6_lookup=1,
                ether__dst_unspec__ip6_lookup__extnet__gw_nd_cache_hit__send=1,
            ),
        )
        self.assertEqual(self.packet_tx[: len(packet_tx)], packet_tx)

    def test_packet_flow_tx__ether__ip6_icmp6_echo_to_extnet_address__no_gateway(self):
        """[Ethernet] Send IPv6/ICMPv6 Echo packet to host on external subnet, no gateway - drop"""

        STACK_IP6_HOST.gateway = None

        tx_status = self.packet_handler._phtx_icmp6(
            ip6_src=STACK_IP6_HOST.address,
            ip6_dst=EXTNET_IP6_ADDRESS,
            icmp6_type=ICMP6_ECHO_REQUEST,
            icmp6_ec_data=b"Test TX ICMPv6 Echo Request to external network",
        )
        self.assertEqual(str(tx_status), "DROPED_ETHER_DST_NO_GATEWAY_IP6")
        self.assertEqual(
            self.packet_handler.packet_stats_tx,
            PacketStatsTx(
                icmp6__pre_assemble=1,
                icmp6__echo_request__send=1,
                ip6__pre_assemble=1,
                ip6__mtu_ok__send=1,
                ether__pre_assemble=1,
                ether__src_unspec__fill=1,
                ether__dst_unspec__ip6_lookup=1,
                ether__dst_unspec__ip6_lookup__extnet__no_gw__drop=1,
            ),
        )

    def test_packet_flow_tx__ether__ip6_icmp6_echo_to_extnet_address__gateway_arp_cache_miss(self):
        """[Ethernet] Send IPv6/ICMPv6 Echo packet to host on external subnet, gateway ND cache miss - drop"""

        STACK_IP6_HOST.gateway = LOCNET_IP6_ADDRESS_NO_ND

        tx_status = self.packet_handler._phtx_icmp6(
            ip6_src=STACK_IP6_HOST.address,
            ip6_dst=EXTNET_IP6_ADDRESS,
            icmp6_type=ICMP6_ECHO_REQUEST,
            icmp6_ec_data=b"Test TX ICMPv6 Echo Request to external network",
        )
        self.assertEqual(str(tx_status), "DROPED_ETHER_DST_GATEWAY_ARP_CACHE_FAIL")
        self.assertEqual(
            self.packet_handler.packet_stats_tx,
            PacketStatsTx(
                icmp6__pre_assemble=1,
                icmp6__echo_request__send=1,
                ip6__pre_assemble=1,
                ip6__mtu_ok__send=1,
                ether__pre_assemble=1,
                ether__src_unspec__fill=1,
                ether__dst_unspec__ip6_lookup=1,
                ether__dst_unspec__ip6_lookup__extnet__gw_nd_cache_miss__drop=1,
            ),
        )

    def test_packet_flow_tx__ether__arp_request__spec_src(self):
        """[Ethernet] Send out the ARP Request packet with specified source"""

        with open("tests/packets/tx/arp_request.tx", "rb") as _:
            packet_tx = _.read()
        tx_status = self.packet_handler._phtx_arp(
            ether_src=STACK_MAC_ADDRESS,
            ether_dst=MacAddress("FF:FF:FF:FF:FF:FF"),
            arp_oper=ARP_OP_REQUEST,
            arp_sha=STACK_MAC_ADDRESS,
            arp_spa=STACK_IP4_HOST.address,
            arp_tha=MacAddress("00:00:00:00:00:00"),
            arp_tpa=LOCNET_IP4_ADDRESS,
        )
        self.assertEqual(str(tx_status), "PASSED_TO_TX_RING")
        self.assertEqual(
            self.packet_handler.packet_stats_tx,
            PacketStatsTx(
                arp__pre_assemble=1,
                arp__op_request__send=1,
                ether__pre_assemble=1,
                ether__src_spec=1,
                ether__dst_spec__send=1,
            ),
        )
        self.assertEqual(self.packet_tx[: len(packet_tx)], packet_tx)

    def test_packet_flow_tx__ether__arp_request__unspec_src(self):
        """[Ethernet] Send out the ARP Request packet with unspecified source"""

        with open("tests/packets/tx/arp_request.tx", "rb") as _:
            packet_tx = _.read()
        tx_status = self.packet_handler._phtx_arp(
            ether_src=MacAddress("00:00:00:00:00:00"),
            ether_dst=MacAddress("FF:FF:FF:FF:FF:FF"),
            arp_oper=ARP_OP_REQUEST,
            arp_sha=STACK_MAC_ADDRESS,
            arp_spa=STACK_IP4_HOST.address,
            arp_tha=MacAddress("00:00:00:00:00:00"),
            arp_tpa=LOCNET_IP4_ADDRESS,
        )
        self.assertEqual(str(tx_status), "PASSED_TO_TX_RING")
        self.assertEqual(
            self.packet_handler.packet_stats_tx,
            PacketStatsTx(
                arp__pre_assemble=1,
                arp__op_request__send=1,
                ether__pre_assemble=1,
                ether__src_unspec__fill=1,
                ether__dst_spec__send=1,
            ),
        )
        self.assertEqual(self.packet_tx[: len(packet_tx)], packet_tx)

    def test_packet_flow_tx__ether__arp_request__unspec_dst(self):
        """[Ethernet] Send out the ARP Request packet with unspecified destination, drop"""

        tx_status = self.packet_handler._phtx_arp(
            ether_src=MacAddress("00:00:00:00:00:00"),
            ether_dst=MacAddress("00:00:00:00:00:00"),
            arp_oper=ARP_OP_REQUEST,
            arp_sha=STACK_MAC_ADDRESS,
            arp_spa=STACK_IP4_HOST.address,
            arp_tha=MacAddress("00:00:00:00:00:00"),
            arp_tpa=LOCNET_IP4_ADDRESS,
        )
        self.assertEqual(str(tx_status), "DROPED_ETHER_DST_RESOLUTION_FAIL")
        self.assertEqual(
            self.packet_handler.packet_stats_tx,
            PacketStatsTx(
                arp__pre_assemble=1,
                arp__op_request__send=1,
                ether__pre_assemble=1,
                ether__src_unspec__fill=1,
                ether__dst_unspec__drop=1,
            ),
        )
